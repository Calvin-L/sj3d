package sj3d;

/**
 * Renders worlds.
 */
final class Renderer {

    // Lighting
    private final Vector lightVector;
    private float lightAmbient, lightIntensity;

    // Settings
    private final int width, height;
    private final int halfwidth, halfheight;
    private final float fudgeScaling;
    private final int ALPHA;

    // Buffers
    private final int[] pixels;
    private final float[] zbuf; // depth of object at each pixel
    private final Model[] modelbuf; // Models at each pixel point
    private final Vector tmpVector = new Vector();
    private final Matrix projectionMatrix = new Matrix();

    Renderer(final int width, final int height, final int[] pixels,
            final float[] zbuf, final Model[] modelbuf,
            final RenderSettings settings) {

        // Screen size
        this.width = width;
        this.height = height;
        halfwidth = width / 2;
        halfheight = height / 2;

        // Scale factor to make coordinates more natural
        final float FOV = 1.04719755f, d = 1.0f / ((float) Math.tan(FOV));
        fudgeScaling = (d / ((float)width / height) + 1) * halfwidth;

        // this.vertices = vertices;
        this.pixels = pixels;
        this.zbuf = zbuf;
        this.modelbuf = modelbuf;
        this.lightVector = new Vector(0, 1, 0);
        this.lightAmbient = 0;
        this.lightIntensity = 1;

        // Configure settings
        ALPHA = settings.mblur;

    }

    /**
     * Set the scene lighting.
     *
     * @param x
     *            the x-component of the light direction
     * @param y
     *            the y-component of the light direction
     * @param z
     *            the z-component of the light direction
     * @param intensity
     *            the intensity of the light
     * @param ambient
     *            the ambient intensity
     */
    void setLighting(final float x, final float y, final float z,
                     final float intensity, final float ambient) {
        lightVector.set(x, y, z);
        lightVector.normalize();
        lightIntensity = intensity;
        lightAmbient = ambient;
    }

    /**
     * Render a model to the specified camera.
     *
     * @param camera
     *            the camera
     * @param object
     *            the model to render
     */
    void render(final Camera camera, final Model object) {

        final Material material = object.material;
        projectAllVertices(camera, object);

        for (int i = 0, l = object.numTriangles(); i < l; i++) {

            final Triangle t = object.getTriangle(i);
            final Vector n = t.getNormal();
            object.getMatrix().multiplyDirection(n, n); // put normal into world coords
            final float cos = n.dot(camera.getForwardVector());

            // back-face culling: only render one side of triangle
            if (cos <= 0.001) {
                renderTriangle(object, t, n, material);
            }

        }

    }

    /**
     * Project all vertices into their correct screen coordinates. This function
     * has the effect of updating the <code>projX</code>, <code>projY</code>,
     * and <code>projZ</code> variables in each vertex of the model.
     *
     * @param camera the camera to project to
     * @param model  the model whose vertices should be projected
     */
    private void projectAllVertices(final Camera camera, final Model model) {
        projectionMatrix.resetToIdentity();
        projectionMatrix.multiplySelf(camera.getMatrix());
        projectionMatrix.multiplySelf(model.getMatrix());

        for (int i = 0, l = model.numVertices(); i < l; i++) {

            final Vertex v = model.getVertex(i);

            // Transform to camera coordinates
            projectionMatrix.multiply(v, tmpVector);

            // Calculate position on screen & depth from camera
            // This bit performs the transformation from orthographic to
            // perspective
            v.projZ = 1.0f / tmpVector.z;
            v.projX = tmpVector.x * fudgeScaling * v.projZ + halfwidth;
            v.projY = tmpVector.y * fudgeScaling * v.projZ + halfheight;

        }

    }

    /**
     * Render a specific triangle.
     */
    private void renderTriangle(final Model model, final Triangle t, final Vector normal, final Material material) {

        // Vertices & vertex texture coordinates
        Vertex a = t.getVertexA();
        Vertex b = t.getVertexB();
        Vertex c = t.getVertexC();
        UVCoord uva = t.getUVA();
        UVCoord uvb = t.getUVB();
        UVCoord uvc = t.getUVC();

        Vertex tempVertex;
        UVCoord tempUV;

        /*
         * Sort vertices by projected y-coordinate; "a" on top, followed by "b"
         * and then "c". This gives us two cases, where point "b" is either left
         * or right of line "a-c".
         */

        if (b.projY < a.projY) {
            tempVertex = a;
            a = b;
            b = tempVertex;
            tempUV = uva;
            uva = uvb;
            uvb = tempUV;
        }
        if (c.projY < b.projY) {
            tempVertex = b;
            b = c;
            c = tempVertex;
            tempUV = uvb;
            uvb = uvc;
            uvc = tempUV;
        }
        if (b.projY < a.projY) {
            tempVertex = a;
            a = b;
            b = tempVertex;
            tempUV = uva;
            uva = uvb;
            uvb = tempUV;
        }

        // See gen-renderer.py
        /* {AUTOGENERATED CODE HERE} */

    }

}
